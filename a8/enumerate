#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Safe;

my %args;

my %media = (
    xegs => {window => '$8000', pages => 32},
    megamax => {window => '$8000', pages => 64},
    atarimax => {window => '$A000', pages => 32},
    megacart => {window => '$8000', pages => 64},
    sic => {window => '$8000', pages => 64},
    thecart => {window => '$A000', pages => 32},
    ram => {window => '$4000', pages => 64},
    emulator => {window => '$4000', pages => 128},
);

my @methods = qw(pcm4+4 pcm4 pwm covox);

sub usage {
    die "Usage: enumerate [-media X] [-method X] [-channels X] [-period X]\n";
}

sub set {
    my ($name, $value) = @_;
    if ($args{set}{$name}++) {
        push @{$args{$name}}, $value;
    } else {
        $args{$name} = [$value];
    }
}
sub main {
    %args = (
        media => [sort keys %media],
        method => [@methods],
        channels => [qw(mono stereo)],
        period => [qw(35 37 50 52 74 105 210)],
    );
    GetOptions(
        "media=s@" => \&set,
        "method=s@" => \&set,
        "channels=s@" => \&set,
        "period=s@" => \&set,
    ) or usage();
    my @targets;
    my $player = `cat player.asm.pl`;
    chdir "build";
    for my $media (sort @{$args{media}}) {
        my $cart = $media =~ /ram|emulator/ ? 0 : 1;
	for my $method (sort @{$args{method}}) {
	    for my $channels (sort @{$args{channels}}) {
		for my $period (reverse @{$args{period}}) {
                    my $fn = "player-$media-$method-$channels-$period.asm.pl";
                    open my $fh, ">$fn" or die "ERROR: Cannot open $fn: $!\n";
                    my $methodmod = $method; $methodmod =~ s/\+//;
		    print $fh "\$media='$media'; \$$media=1; \$cart=$cart; \$$methodmod=1; \$$channels=1; \$period=$period;";
                    for my $var (sort keys %{$media{$media}}) {
                        my $val = $media{$media}{$var};
                        if ($val =~ /\$/) {
                            print $fh " \$$var='$media{$media}{$var}';";
                        } else {
                            print $fh " \$$var=$media{$media}{$var};";
                        }
                    }
                    print $fh "\n";
                    print $fh $player;
                    close $fh;
                    my $asm = $fn;
                    $asm =~ s/\.pl$//;
                    my $lab = $fn;
                    $lab =~ s/\.asm\.pl$/.lab/;
                    my $lst = $fn;
                    $lst =~ s/\.asm\.pl$/.lst/;
                    my $obx = $fn;
                    $obx =~ s/\.asm\.pl$/.obx/;
                    warn "INFO: Generating $asm...\n";
                    #system "cd build; perl $fn > $asm && " .
                    #    "xasm /t:$lab /l:$lst $asm";
                    my $c = new Safe;
                    $c->reval('open STDOUT, ">$asm" or die "ERROR: Cannot open $asm: $!\n";');
                    $c->rdo("./$fn");
                    push @targets, $obx;
		}
	    }
	}
    }
    warn "INFO: Assembling...\n";
    system("make -f ../Makefile -j12 @targets");
    warn "INFO: Done\n";
}

main();
